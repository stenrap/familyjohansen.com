==========================
    familyjohansen.com
==========================

Database:

    - The 'authors' table is used for authentication, and is comprised of the following columns:

        + id
        + username
            > Indexed for fast user lookup
        + password
        + email
            > Indexed for password reset
        + token
            > Indexed for password reset
    
    
    - The 'posts' table stores all posts, and is comprised of the following columns:
    
        + id
        + featured
            > A path to a featured image/video that appears at the top of the post, uploaded locally or hosted elsewhere (YouTube, Vimeo)
        + video
            > A boolean indicating whether the media is a video
        + title
            > The actual title of the post
        + normalized_title
            > Indexed and used as the post's friendly URL
        + date
            > The date the post was published
            > Configurable by the author, and indexed so the home page can show the most recent
        + author
            > An id that is a foreign key to 'authors.id'
            > Indexed so you can see all posts by an author
        + tags
            > Tags declared by the author
            > Indexed so you can see all posts with a tag
        + body
            > The content of the post, with full support for HTML
    
    
    - Stored procedures used by the db-service:
    
        + [DONE] getUser() - look up a user for authentication
        
        + [DONE] createPost() - create a new post
        
        + [DONE] getSinglePost() - read a single post by title
        
        + [DONE] getPostsByDate() - read 10 recent posts for the home page (based on an offset)
        
        + [DONE] getPostsByAuthor() - read 10 recent posts by an author (based on an offset)
        
        + [DONE] getPostsByTag() - read 10 recent posts by tag (based on an offset)

        + [DONE] updatePost() - update a single post by id
        
        + [DONE] deletePost() - delete a single post by id


Routes:

    - Each post will be accessible via a friendly URL derived from the title and consisting of only lowercase letters and dashes:
    
        http://www.familyjohansen.com/our-story
    
    -


Templates:

    - All templates are written in Jade.

    - Each template is compiled into JavaScript so that client-side rendering can be done by passing a model to a JavaScript function.

    - Compiled templates are accessible as functions of the form 'template_path_to_file(model)', where the path begins at /views.

        + For example, if you have a template in this file...

            /views/admin/post.jade

        ...then in JavaScript you would make this call to render it (after getting the model): template_admin_post(model);

    - The less flexible workflow is:

        + Create or modify a template in Jade

        + Invoke Jade from the command prompt to compile the template into a .js file named after the .jade file

        + Include the appropriate .js file in the appropriate rendered page

    - Here's an example of compiling a template into JavaScript:

        ./node_modules/jade/bin/jade.js --client --name template_admin_login --out ./public/js/templates --no-debug ./views/admin/login.jade

    - WYLO .... Learn how to make this happen with Grunt ... The much more flexible workflow you'd like to have (using grunt) is:

        + A configuration that allows you to specify:

            > The name of a .jade template file
            > The name that should be given to each function associated with a .jade template file during compilation
            > The full path and name of the .js file into which the template function(s) will be written

        + Following is an example configuration:

            {
                "templates" : [
                    {
                        name : 'admin',
                        input : ['/path/to/admin/login.jade', '/path/to/admin/reset.jade']
                    },
                    {
                        name : 'posts',
                        input : ['path/to/posts/list.jade', 'path/to/posts/edit.jade']
                    }
                ],
            }

        + The above configuration produces the following:

            > A template file named template_admin.js with two functions:

                template_admin_login()
                template_admin_reset()

            > A template file named template_posts.js with two functions:

                template_posts_list()
                template_posts_edit()


Email:

    Username:	     FAMILY_JOHANSEN_NO_REPLY_USER
    Password:        FAMILY_JOHANSEN_NO_REPLY_PASSWORD
    Outgoing Server: box428.bluehost.com
    SMTP Port:       465



















